#!/bin/sh
#
# Cloudflare DDNS functions script


############################
# --- Global Variables --- #
############################
export CF_ACCESS_TOKEN="" # Start with "Bearer "
export ZONE_IDENTIFIER=""
export RECORD_NAME=""


############################
# -- Utilities Function -- #
############################
err() {
    echo >&2 "[ERROR] | $(date +'%Y-%m-%dT%H:%M:%S') | $*"
}

info() {
    echo >&2 "[INFO] | $(date +'%Y-%m-%dT%H:%M:%S') | $*"
}


############################
# Cloudflare-ddns Section  #
############################


get_wan_ipv4_addr() {

    local lan_ip_segments
    local ipv4_addr

    if [[ ! "$(uname)" == "Linux" ]]; then
        err "non-Linux Platform is not supported." 
        return 1
    fi

    lan_ip_segments="^$"
    ipv4_addr=""

    lan_ip_segments="${lan_ip_segments}|(^10\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lan_ip_segments="${lan_ip_segments}|(^127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lan_ip_segments="${lan_ip_segments}|(^169\.254\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lan_ip_segments="${lan_ip_segments}|(^172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]{1,3}\.[0-9]{1,3}$)"
    lan_ip_segments="${lan_ip_segments}|(^192\.168\.[0-9]{1,3}\.[0-9]{1,3}$)"

    info "Getting Network Ip locally using cli-program ip..."

    ipv4_addr=$(
        ip -oneline -4 address |
            grep -v -E '\slo|\sdocker' |
            awk '{ print $4 }' |
            cut -d'/' -f1 |
            grep -v -E "${lan_ip_segments}"
    )


    if [[ -z "${ipv4_addr}" ]]; then
        err "Failed to Get Network Ip locally." 
        info "Using api.ipify.org to retrieve ip..." 
        if command -v curl >/dev/null 2>&1; then
            info "Using curl..." 
            ipv4_addr=$(curl --silent -L https://api.ipify.org)
            info "ip.ipify.org => ${ipv4_addr}"  
        else
            err "curl is unavailable/uninstalled. " 
            err "Please install curl to resolve dependency problem" 
            return 1
        fi
    else
        info "cli-program ip => ${ipv4_addr}" 
    fi

    echo "${ipv4_addr}"

}


getCurrent4Record() {

    local _retrieve_json
    local _active_record_count
    local current_record_ip
    local current_record_id

    info "Curl to Cloudflare v4 api..." 

    _retrieve_json=$(
        curl --silent -X GET "https://api.cloudflare.com/client/v4/zones/${ZONE_IDENTIFIER}/dns_records?name=${RECORD_NAME}&type=A" \
            -H "Authorization: ${CF_ACCESS_TOKEN}" \
            -H "Content-Type: application/json"
    )

    _active_record_count=$(echo "${_retrieve_json}" | jq -r '.result_info.count')

    if [[ ${_active_record_count} == 0 ]]; then
        err "Record NOT Found." 
        return 127
    fi

    current_record_ip=$(echo "${_retrieve_json}" | jq -r '.result[0].content')
    current_record_id=$(echo "${_retrieve_json}" | jq -r '.result[0].id')
    info "${RECORD_NAME} has corresponding cloudflare-side id: ${current_record_id}" 
    info "${RECORD_NAME} now points to --> ${current_record_ip}" 

    jq -r -c --null-input \
        --arg id "${current_record_id}" \
        --arg ip "${current_record_ip}" \
        '{ record_id: $id, record_ip: $ip }'

}


create4RecordIfNotExists() {
    
    local host_ip="$1"
    local _retrieve_json

    info "Attempting to CREATE record via curl POST..." 
    
    _retrieve_json=$(
        curl --silent -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_IDENTIFIER}/dns_records" \
            -H "Authorization: ${CF_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            --data "$(
                jq -r -c --null-input \
                    --arg record_name "${RECORD_NAME}" \
                    --arg record_ip "${host_ip}" \
                    '{"type": "A", "name": $record_name, "content": $record_ip, "ttl": 100, "proxied": false}'
            )"
    )

    if [[ $(echo "${_retrieve_json}" | jq -r '.success') == "true" ]]; then
        info "${RECORD_NAME} is CREATED." 
        info "If this is the first time you run this script."
        info "Don't worry, it ran well. Proceed to next step in Documentation." 
        info "Record detail will follow in 5 seconds......"
        info "If NOT --> (Be advised) Your record name is not found on cloudflare."
        info ", which leads to auto-re-creation of the record." 
        sleep 5
        info "$(getCurrent4Record)" 
        exit 0
    else
        err "${RECORD_NAME} creation failed. Result pretty print as below." 
        err "${_retrieve_json}" | jq -r '.' 
        exit 1
    fi
}


updateCurrent4Record() {

    local pending_record_id="$1"
    local pending_record_ip="$2"
    local _retrieve_json

    info "Attempting to point record id ${pending_record_id} to ${pending_record_ip} via curl PUT..." 

    _retrieve_json=$(
        curl --silent -X PUT "https://api.cloudflare.com/client/v4/zones/${ZONE_IDENTIFIER}/dns_records/${pending_record_id}" \
            -H "Authorization: ${CF_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            --data "$(
                jq -r -c --null-input \
                    --arg record_name "${RECORD_NAME}" \
                    --arg record_ip "${pending_record_ip}" \
                    '{"type": "A", "name": $record_name, "content": $record_ip, "ttl": 100, "proxied": false}'
            )"
    )

    if [[ $(echo "${_retrieve_json}" | jq -r '.success') == "true" ]]; then
        info "${RECORD_NAME} is updated, now points to ${pending_record_ip}" 
        return 0
    else
        err "${RECORD_NAME} update failed. Result pretty print as below." 
        err $(echo "${_retrieve_json}" | jq -r '.')
        return 1
    fi

    return 0
}


main() {

    local _error
    local _return_tmp
    local record_id
    local record_ip
    local host_ip

    info "Getting Host Ip Address"

    host_ip=$(get_wan_ipv4_addr)
    _error="$?"
    if [[ "${_error}" -ne 0 ]]; then
        return 1
    fi

    info "Getting Record Ip from Cloudflare"

    _return_tmp=$(getCurrent4Record)
    _error="$?"
    if [[ "${_error}" -eq 0 ]]; then
        record_id=$(echo "${_return_tmp}" | jq -r '.record_id')
        record_ip=$(echo "${_return_tmp}" | jq -r '.record_ip')
    elif [[ "${_error}" -eq 127 ]]; then
        create4RecordIfNotExists ${host_ip}
    else
        return 1
    fi

    if [[ "${host_ip}" == "${record_id}" ]]; then
        info "Ip stays the same, no need to update. Exiting."
        return 0
    fi

    info "Updating Record Ip"

    updateCurrent4Record "${record_id}" "${host_ip}"
    _error="$?"
    if [[ "${_error}" -ne 0 ]]; then
        return 1
    fi

}
